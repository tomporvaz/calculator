{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","inputNumArr","calcArr","total","handleInput","handleNumInput","bind","assertThisInitialized","handleOperator","handleClear","handleCalculation","input","arr","toConsumableArray","numRegEx","length","push","test","filter","x","undefined","setState","operation","concat","console","log","join","newArr","math","eval","format","precision","_this2","react_default","a","createElement","className","id","react_github_btn","href","style","color","onClick","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5dacf884.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport math from \"mathjs\";\nimport GitHubButton from 'react-github-btn';\n\n\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      inputNumArr: [],\n      calcArr: [],\n      total: 0\n\n    }\n    this.handleInput = this.handleNumInput.bind(this);\n    this.handleOperator = this.handleOperator.bind(this);\n    this.handleClear = this.handleClear.bind(this);\n    this.handleCalculation = this.handleCalculation.bind(this);\n    \n  }\n  /*event handler for number inputs*/\n  handleNumInput(input){\n    let arr =[...this.state.inputNumArr];\n    const numRegEx = /\\d/;\n    \n    /*The if/then logic here validates the input of numeral zero,\n    and decimal points.  Only 1 decimal per number and only one leading \n    zero before a decimal.*/\n\n    /*If inputNumArr only has one number and that number is 0,\n    then preform special process for entering numbers or decimal.*/\n    if(arr.length === 1 && arr[0] === 0){\n      //if input is a decimal, then append decimal and return\n      if(input === \".\"){\n        arr.push(\".\");\n      } \n      //if input is a number, then replace 1st position with input\n      else if (numRegEx.test(input)){\n        arr[0] = input;\n      }\n    } \n    /*if input is a decimal and there are no decimals in the array,\n    then append a decimal*/\n    else if (input === \".\" && (arr.filter(x => x === \".\") == 0)){\n      if (arr[0] === undefined){\n        arr = [0, \".\"];\n      } else {\n      arr.push(\".\");\n      }\n    }\n    //else if input is a number, then append number to array\n    else if (numRegEx.test(input)){\n      arr.push(input);\n    }\n    \n    this.setState({\n      inputNumArr: arr,\n      total: \"\"\n    })\n     \n  }\n\n  /*event handler for operations*/\n  handleOperator(operation){\n    let arr = [...this.state.calcArr];\n    /*if input number is equal to zero, then update operator in the last position of calcArr\n    with the input operation*/\n    if(this.state.inputNumArr.length === 0 && this.state.total !== \"\"){\n      arr = [...arr, this.state.total, operation];\n    } else if(this.state.inputNumArr.length === 0){\n      console.log(\"Last in calcArr: \" + arr[arr.length - 1]);\n      arr[arr.length - 1] = operation;\n    } else {\n      arr = [...arr, this.state.inputNumArr.join(\"\"), operation];\n    }\n\n    \n    this.setState({\n      inputNumArr: [],\n      calcArr: arr,\n      total: \"\"\n    })\n  }\n\n  /*event handler for clear all*/\n  handleClear(){\n    this.setState({\n      inputNumArr: [],\n      calcArr: [],\n      total: 0\n    })\n  }\n\n  /*event handler to calculate the total*/\n  handleCalculation(){\n    let newArr = [...this.state.calcArr, this.state.inputNumArr.join(\"\")];\n\n    /*if then logic added here to test for valid math expression before passing\n    to math.eval*/\n    if(this.state.inputNumArr.length !== 0){\n      let total = math.eval(newArr.join(\"\"));\n      this.setState({\n        inputNumArr: [],\n        calcArr: [],\n        total: math.format(total, {precision: 12})\n      })\n    }\n  }\n\n  render() { \n    return (\n      <div className=\"App\">\n        <div id=\"githubbtn\">\n        <GitHubButton  href=\"https://github.com/tomporvaz/calculator\">View on GitHub</GitHubButton>\n        </div>\n\n        <h3 style={{color: \"white\"}}>Calculator by</h3>\n        <h4><a href=\"https://tomporvaz.github.io/\">Tom Porvaznik</a></h4>\n        <div id=\"calculator\">\n          <p id=\"display\">{this.state.calcArr}{this.state.inputNumArr}{this.state.total}</p>\n          <div id=\"btnContainer\">\n            <button id='clear' onClick={this.handleClear}>AC</button>\n            <button id='divide' onClick={() => this.handleOperator(\"/\")}>/</button>\n            <button id='multiply'onClick={() => this.handleOperator(\"*\")}>*</button>\n            <button id='subtract'onClick={() => this.handleOperator(\"-\")}>-</button>\n            <div id=\"numBtnsContainer\">\n              <button id=\"seven\" onClick={() => this.handleNumInput(7)}>7</button>\n              <button id=\"eight\" onClick={() => this.handleNumInput(8)}>8</button>\n              <button id=\"nine\" onClick={() => this.handleNumInput(9)}>9</button>\n              <button id=\"four\" onClick={() => this.handleNumInput(4)}>4</button>\n              <button id=\"five\" onClick={() => this.handleNumInput(5)}>5</button>\n              <button id=\"six\" onClick={() => this.handleNumInput(6)}>6</button>\n              <button id=\"one\" onClick={() => this.handleNumInput(1)}>1</button>\n              <button id=\"two\" onClick={() => this.handleNumInput(2)}>2</button>\n              <button id=\"three\" onClick={() => this.handleNumInput(3)}>3</button>\n            </div>              \n            <button id='add'onClick={() => this.handleOperator(\"+\")}>+</button>\n            <button id='zero' onClick={() => this.handleNumInput(0)}>0</button>\n            <button id='decimal'onClick={() => this.handleNumInput(\".\")}>.</button>\n            <button id='equals' onClick={this.handleCalculation}>=</button>\n          </div>\n        </div>\n      </div>\n      );\n    }\n  }; \n   \n  export default App;\n  ","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}